
Test Report for RiskCheck, ASIC, and AustralianSearch Pages
1. Introduction
This test report outlines the tests conducted for the three web application pages: RiskCheck, ASIC Search, and Australian Company Search. The objective is to ensure the functionality, usability, and stability of the system. The testing methodology includes unit testing, integration testing, and user acceptance testing. The testing approach is primarily black-box testing, focusing on input and output without requiring internal code visibility.

2. Purpose of Testing
The testing aimed to verify:

Correct Functionality: Ensure each page performs as intended.
Usability: Confirm that users can interact smoothly with the system.
Reliability and Integrity: Ensure the system produces predictable and reliable results for multiple queries.
The testing is in line with the seven principles of testing, emphasizing the early detection of defects and considering the testing context. We performed tests at different levels to provide comprehensive coverage.

3. Testing Types
Unit Testing: Test individual components (e.g., input form validation, API integration).
Integration Testing: Ensure the interaction between the backend API and the frontend interface is functioning correctly.
User Acceptance Testing (UAT): Test the overall functionality and interaction with realistic user scenarios.
4. Test Cases
4.1. ASIC Search Page
Test Case 1: Verify that a user can input a company name and receive the correct results.

Test Type: Functional
Pre-Conditions: Backend API /search/asic is running and accessible.
Steps:
Navigate to the ASIC Search page.
Input a valid company name (e.g., "BHP").
Click "Search".
Expected Result: User should see relevant company details like name, ABN, status, registration date, and address.
Outcome:
Pass: If results are displayed correctly.
Fail: If an error message appears indicating data retrieval issues.
Test Case 2: Invalid Input Handling

Objective: Confirm appropriate error messages appear when entering invalid characters.
Steps: Enter symbols or empty strings in the search bar.
Expected Result: An error message should appear, and no results should be displayed.
4.2. Australian Search Page
Test Case 3: Verify that users can search for Australian company information.

Pre-Conditions: Backend API /search/australian is accessible.
Steps:
Navigate to the Australian Company Info page.
Input a valid company keyword (e.g., "BHP").
Click "Search".
Expected Result: Display company details, including the name, ID, established date, links, and locations.
Outcome: Displayed information should match the API response data without formatting issues.
Test Case 4: Test for "No Results Found"

Steps: Input a company name that does not exist.
Expected Result: The system should show a message like "No results found for the given input."
4.3. RiskCheck Page
Test Case 5: Verify the risk-check feature for companies.

Test Type: Functional
Pre-Conditions: Backend API /check-risk is accessible.
Steps:
Navigate to the RiskCheck page.
Enter a valid company name (e.g., "Apple").
Click "Search".
Expected Result: Display relevant risks such as "financial loss," "fraud," etc., if applicable. If no risks are found, indicate this clearly.
Outcome: The risk data should be properly displayed as structured information without errors.
Test Case 6: Risk Search without selecting specific categories.

Steps: Perform a search without specifying any categories.
Expected Result: Display all available risk-related information, structured neatly.
4.4. Common Scenarios for All Pages
Test Case 7: Page Load Test

Objective: Ensure that each search page loads in under 3 seconds.
Outcome: The pages should load smoothly without significant delays.
Test Case 8: Edge Case Search Test

Objective: Test the system with edge cases like extremely long company names or special characters.
Expected Result: The system should handle the input gracefully, showing either valid results or appropriate error messages.
5. User Experience Testing
Objective: To determine whether users can efficiently perform searches using the ASIC, RiskCheck, and Australian Search pages.
Method:
Conduct testing with a sample group of target users.
Gather feedback on ease of use, interface clarity, and overall satisfaction.
Findings: Minor UI improvements were suggested, such as making error messages more descriptive and ensuring the search button is prominently displayed.
6. Results Summary
ASIC Search Page: Most tests passed. The main issues were related to backend connectivity errors (e.g., "无法找到浏览器可执行文件路径" error), which required configuration of browser paths.
Australian Search Page: Successfully retrieved data for valid queries, but UI improvements are needed for displaying multiple locations.
RiskCheck Page: Backend API connection errors resulted in "Unable to retrieve risk information." It is suggested to debug API endpoints and ensure consistent connectivity.
7. Recommendations
Backend Issues: Debug the browser executable configuration for ASIC search.
User-Friendly Error Messages: Improve error messages to be more descriptive and user-friendly.
Loading Indicators: Implement a loading spinner to indicate when the system is processing a search request.
Edge Case Handling: Additional validation for inputs is recommended to handle unexpected user behaviors.
8. Conclusion
The current testing cycle highlights the functional aspects and critical errors in backend connectivity. Immediate attention is required to solve API connectivity issues to ensure smooth data retrieval for end users. Testing shows the presence of some key issues but proves that the core functionality works under the right conditions.

Next Steps:

Resolve backend issues with the browser path configuration.
Conduct further testing to ensure stability and improve user experience.
Iterate on UI improvements based on user feedback.
